apiVersion: v1
kind: Service
metadata:
  name: redis-{{{id}}}
  namespace: {{{k8SNamespace}}}
  labels:
     app: {{{id}}}
     tier: redis
spec:
  ports:
  - port: 6379
    targetPort: 6379
  selector:
    app: {{{id}}}
    tier: redis
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-{{{id}}}
  namespace: {{{k8SNamespace}}}
spec:
  selector:
    matchLabels:
      app: {{{id}}}
      tier: redis
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: {{{id}}}
        tier: redis
      annotations:
        touch: {{{touch}}}
    spec:
      automountServiceAccountToken: false
      securityContext:
        runAsUser: 1003
        supplementalGroups: [1004]
      containers:
      - name: master
        image: {{{image}}}
        imagePullPolicy: Always
        volumeMounts:
        - mountPath: /data
          name: cp-data
          readOnly: false
          subPath: redis-{{{id}}}-{{{timestamp}}}
        args: ["--appendonly", "yes"]
        resources:
          requests:
            cpu: {{{cpus}}}
            memory: {{{memory}}}
        {{#isUntrusted}}
          limits:
            memory: {{{memoryLimit}}}
            cpu: {{{cpusLimit}}}
        {{/isUntrusted}}
        ports:
        - containerPort: 6379
        livenessProbe:
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
          exec:
            command:
            - redis-cli
            - ping
        readinessProbe:
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 5
          exec:
            command:
            - redis-cli
            - ping
      nodeSelector:
        {{{poolKey}}}: {{{poolValue}}}
      volumes:
      - name : cp-data
        persistentVolumeClaim:
          claimName: nfs-claim
---

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: redis-{{{id}}}
  namespace: {{{k8SNamespace}}}
spec:
  podSelector:
    matchLabels:
      app: {{{id}}}
      tier: redis
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          tier: app
      podSelector:
        matchLabels:
          app: {{{id}}}
          tier: app
    - podSelector:
        matchLabels:
          app: {{{id}}}
          tier: redis
